<?php

/**
 * @file
 * Project Health report from Drupal.org .
 */

define('PROJECTHEALTH_DEFAULT_START_TIME', '0');

// 1800000000 is 2027-01-15 08:00:00
define('PROJECTHEALTH_DEFAULT_END_TIME', '1800000000');

/**
 * Implements hook_form_alter().
 */
function projecthealth_form_project_node_form_alter(&$form, &$form_state) {
  $form['title'] = array(
    '#value' => t('Project details not available yet.'),
  );
  $form['body']['#access'] = FALSE;
}

/**
 * Implements hook_menu().
 */
function projecthealth_menu() {

  $items['projecthealth/add'] = array(
    'title' => 'Take snapshot of a project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('projecthealth_form'),
    'access arguments' => array('projecthealth take snapshot'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['projecthealth/view'] = array(
    'title' => 'Projects',
    'page callback' => 'projecthealth_list_projects',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['projecthealth/view/%'] = array(
    'title' => 'Snapshots',
    'page callback' => 'projecthealth_list_project_snapshots',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['projecthealth/view/%/%'] = array(
    'title' => 'Report',
    'page callback' => 'projecthealth_view_snapshot',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['projecthealth/data/%/%'] = array(
    'page callback' => 'projecthealth_generate_report_data',
    'page arguments' => array(2, 3),
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'projecthealth.data.inc',
    'file path' => drupal_get_path('module', 'projecthealth'),
  );

  $items['projecthealth/delete/%/%'] = array(
    'title' => 'Take snapshot of a project',
    'page callback' => 'projecthealth_delete_snapshot',
    'page arguments' => array(2, 3),
    'access arguments' => array('projecthealth delete snapshot'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form to create snapshot of a project.
 *
 * @see projecthealth_menu()
 */
function projecthealth_form($form, &$form_state) {

  // @todo: support monthly snapshot.
  $form['snapshot'] = array(
    '#type' => 'textfield',
    '#title' => t('Snapshot name'),
    '#description' => t('Give the name to snapshot.'),
    '#default_value' => t('All time'),
    '#disabled' => TRUE,
  );

  $form['field_project_machine_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Project machine name'),
    '#description' => t('The machine name of the project at Drupal.org'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );
  return $form;
}

/**
 * Validate handler for projecthealth_form().
 */
function projecthealth_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  // Create a snapshot id for current status calculation.
  $project = drupalorg_api_get_project($values['field_project_machine_name']);
  if (empty($project)) {
    form_set_error('field_project_machine_name', t('Invalid project machine name.'));
  }
}


/**
 * Submit handler for projecthealth_form().
 */
function projecthealth_form_submit($form, $form_state) {
  $values = $form_state['values'];
  // Create a snapshot id for current status calculation.
  $sid = projecthealth_snapshot_create($values['snapshot']);
  $project = drupalorg_api_get_project($values['field_project_machine_name']);
  $pid = projecthealth_project_create($sid, $project);

  $data['sid'] = $sid;
  $data['pid'] = $pid;
  $data['project'] = $project;

  projecthealth_snapshot_process_maintainers($data);
  projecthealth_snapshot_process_issues($data);

  drupal_goto("projecthealth/view/$pid/$sid");
}


/**
 * List available Projects.
 *
 * @see projecthealth_menu()
 */
function projecthealth_list_projects() {
  $header = array(
    array('data' => t('ID')),
    array('data' => t('Project machine name')),
    array('data' => t('Snapshot created')),
    array('data' => t('Operations')),
  );

  $query = db_select('projecthealth_project', 'p')->extend('PagerDefault');
  $query->fields('p', array('id', 'name', 'sync_time', 'sid'));

  $result = $query
    ->limit(10)
    ->orderBy('p.name')
    ->execute();

  $rows = array();
  foreach ($result as $row) {
    $links = array();
    $links[] = array(
      'title' => t('view'),
      'href' => "projecthealth/view/{$row->id}/{$row->sid}",
    );
    $links[] = array(
      'title' => t('delete'),
      'href' => "projecthealth/delete/{$row->id}/{$row->sid}",
    );
    $operations = theme('links__ctools_dropbutton', array('links' => $links));

    $item = array(
      $row->id,
      $row->name,
      format_date($row->sync_time),
      $operations,
    );
    $rows[] = array('data' => $item);
  }

  $build['pager_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('There are no project snapshots.'),
  );

  $build['pager_pager'] = array('#theme' => 'pager');

  return $build;
}


/**
 * List available Project snapshot.
 *
 * @see projecthealth_menu()
 */
function projecthealth_list_project_snapshots($project_machine_name) {
  return 'PLACEHOLDER LIST for ' . $project_machine_name;
}

/**
 * View Project snapshot.
 *
 * @see projecthealth_menu()
 */
function projecthealth_view_snapshot($pid, $sid) {
  $data = array(
    'sid' => $sid,
    'pid' => $pid,
  );
  module_load_include('inc', 'projecthealth', 'projecthealth.data');
  $data += projecthealth_generate_report_data($pid, $sid);
  drupal_set_title(check_plain($data['project']->data->title));
  return theme('projecthealth_snapshot', $data);
}

/**
 * Implements hook_theme().
 */
function projecthealth_theme($existing, $type, $theme, $path) {
  return array(
    'projecthealth_snapshot' => array(
      'render element' => 'element',
      'template' => 'projecthealth.snapshot',
      'variables' => array('data' => array()),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function projecthealth_permission() {
  return array(
    'projecthealth take snapshot' => array(
      'title' => t('Create Project health snapshot'),
      'description' => t('Take a project health snapshot'),
    ),
    'projecthealth delete snapshot' => array(
      'title' => t('Delete Project health snapshot'),
      'description' => t('Delete a project health snapshot'),
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function projecthealth_cron_queue_info() {
  $queues['projecthealth_issues'] = array(
    'worker callback' => 'projecthealth_snapshot_process_issues',
    'time' => 30,
  );
  $queues['projecthealth_comments'] = array(
    'worker callback' => 'projecthealth_snapshot_process_comments',
    'time' => 30,
  );
  return $queues;
}

/**
 * Given issue node id, process all comments under the node.
 */
function projecthealth_snapshot_process_issues($data) {
  $project = $data['project'];
  $sid = $data['sid'];
  $pid = $data['pid'];

  $comment_data = $data;

  $page = 0;
  while (TRUE) {
    $result = drupalorg_api_get_issues($project, $page);
    foreach ($result->list as $issue) {
      projecthealth_issue_create($sid, $pid, $issue);
      $comment_data['issue'] = $issue;
      projecthealth_snapshot_process_comments($comment_data);
    }
    if (empty($result->next)) {
      break;
    }
    $page++;
  }
}

/**
 * Given issue node id, process all comments under the node.
 */
function projecthealth_snapshot_process_comments($data) {
  $issue = $data['issue'];
  $project = $data['project'];
  $sid = $data['sid'];
  $pid = $data['pid'];

  $page = 0;
  while (TRUE) {
    $result = drupalorg_api_get_comments($issue, $page);
    foreach ($result->list as $comment) {
      projecthealth_comment_create($sid, $pid, $issue, $comment);
    }
    if (empty($result->next)) {
      break;
    }
    $page++;
  }
}

/**
 * Process all maintainers for the project.
 */
function projecthealth_snapshot_process_maintainers($data) {
  $project = $data['project'];
  $sid = $data['sid'];
  $pid = $data['pid'];
  $result = drupalorg_api_get_maintainers($project);
  foreach ($result as $do_uid => $user) {
    projecthealth_user_create($pid, $do_uid, 0, 1);
  }
}


/**
 * Delete all data related to snapshot.
 */
function projecthealth_delete_snapshot($pid, $sid) {
  // Delete snapshot sid
  $count = db_delete('projecthealth_snapshot')->condition('id', $sid)->execute();
  if ($count) {
    drupal_set_message(t('Successfully deleted snapshot [sid @sid]', array('@sid' => $sid)), 'status');
  }

  // Delete project pid
  $count = db_delete('projecthealth_project')->condition('id', $pid)->execute();
  if ($count) {
    drupal_set_message(t('Successfully deleted project in snapshot [sid @sid] for project [pid @pid]', array('@sid' => $sid, '@pid' => $pid)), 'status');
  }


  // Delete all issues taggeed with sid pid
  $count = db_delete('projecthealth_issue')->condition('pid', $pid)->condition('sid', $sid)->execute();
  if ($count) {
    drupal_set_message(t('Successfully deleted the @count issues in snapshot [sid @sid] for project [pid @pid]', array('@count' => $count,'@sid' => $sid, '@pid' => $pid)), 'status');
  }

  // Delete all comments tagged with sid pid
  $count = db_delete('projecthealth_comment')->condition('pid', $pid)->condition('sid', $sid)->execute();
  if ($count) {
    drupal_set_message(t('Successfully deleted the @count comments in snapshot [sid @sid] for project [pid @pid]', array('@count' => $count,'@sid' => $sid, '@pid' => $pid)), 'status');
  }

  // Delete all users tagged with pid
  $count = db_delete('projecthealth_user')->condition('pid', $pid)->execute();
  if ($count) {
    drupal_set_message(t('Successfully deleted the @count users in snapshot [sid @sid] for project [pid @pid]', array('@count' => $count,'@sid' => $sid, '@pid' => $pid)), 'status');
  }

  drupal_goto('projecthealth/view');
}

/**
 * Creates a snapshot.
 */
function projecthealth_snapshot_create($title) {

  $fields = array(
    'created' => REQUEST_TIME,
    'start' => 0,
    'end' => -1,
    'progress' => 0,
    'title' => $title,
  );

  $snapshot_id = db_insert('projecthealth_snapshot')
    ->fields($fields)
    ->execute();

  return $snapshot_id;
}

/**
 * Creates a project.
 */
function projecthealth_project_create($sid, $project) {

  $fields = array(
    'name' => $project->field_project_machine_name,
    'created' => $project->created,
    'sid' => $sid,
    'uid' => $project->author->id,
    'sync_time' => REQUEST_TIME,
    'maintenance_status' => $project->taxonomy_vocabulary_44->id,
    'development_status' => $project->taxonomy_vocabulary_46->id,
    'downloads' => $project->field_download_count,
    'data' => serialize($project),
  );

  $project_id = db_insert('projecthealth_project')
    ->fields($fields)
    ->execute();

  projecthealth_user_update($project_id, $project->author->id, $project->created);

  return $project_id;
}

/**
 * Creates a issue.
 */
function projecthealth_issue_create($sid, $pid, $issue) {

  $fields = array(
    'created' => $issue->created,
    'sid' => $sid,
    'pid' => $pid,
    'uid' => $issue->author->id,
    'sync_time' => REQUEST_TIME,
    'issue_id' => $issue->nid,
    'priority' => $issue->field_issue_priority,
    'status' => $issue->field_issue_status,
    'category' => $issue->field_issue_category,
  );

  $issue_id = db_insert('projecthealth_issue')
    ->fields($fields)
    ->execute();

  projecthealth_user_update($pid, $issue->author->id, $issue->created);

  return $issue_id;
}

/**
 * Creates a comment.
 */
function projecthealth_comment_create($sid, $pid, $issue, $comment) {
  // Don't log system generated comments.
  if (empty($comment->author->id)) {
    return;
  }
  $fields = array(
    'created' => $comment->created,
    'sid' => $sid,
    'pid' => $pid,
    'uid' => $comment->author->id,
    'sync_time' => REQUEST_TIME,
    'issue_id' => $issue->nid,
  );

  $issue_id = db_insert('projecthealth_comment')
    ->fields($fields)
    ->execute();

  projecthealth_user_update($pid, $issue->author->id, $issue->created);

  return $issue_id;
}

/**
 * Creates a project.
 */
function projecthealth_user_create($pid, $do_uid, $latest_activity = 0, $maintainer = 0) {
  $user_id = NULL;
  $user = drupalorg_api_get_user($do_uid);
  if ($user) {
    $fields = array(
      'uid' => $user->uid,
      'created' => $user->created,
      'name' => $user->name,
      'pid' => $pid,
      'maintainer' => $maintainer,
      'latest_activity' => $latest_activity,
    );
    $user_id = db_insert('projecthealth_user')
      ->fields($fields)
      ->execute();
  }
  return $user_id;
}

/**
 * Update user's last activity time.
 */
function projecthealth_user_update($pid, $do_uid, $activity_time) {
  // Get latest activity.
  $result = db_select('projecthealth_user', 'pu')
    ->fields('pu')
    ->condition('uid', $do_uid)
    ->condition('pid', $pid)
    ->execute()
    ->fetchAssoc();

  if (empty($result)) {
    projecthealth_user_create($pid, $do_uid, $activity_time);
  }
  else {
    $latest_activity = $result['latest_activity'];
    if ($latest_activity < $activity_time) {
      $fields = array(
        'latest_activity' => $activity_time,
      );
      db_update('projecthealth_user')
        ->fields($fields)
        ->condition('uid', $do_uid)
        ->condition('pid', $pid)
        ->execute();
    }
  }
}
