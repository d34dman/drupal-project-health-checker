<?php

/**
 * @file
 * Project Health report from Drupal.org .
 */

/**
 * Implements hook_form_alter().
 */
function projecthealth_form_project_node_form_alter(&$form, &$form_state) {
  $form['title'] = array(
    '#value' => t('Project details not available yet.'),
  );
  $form['body']['#access'] = FALSE;
}

/**
 * Implements hook_menu().
 */
function projecthealth_menu() {

  $items['projecthealth/add'] = array(
    'title' => 'Take snapshot of a project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('projecthealth_form'),
    'access arguments' => array('projecthealth take snapshot'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
 * Form to create snapshot of a project.
 *
 * @see projecthealth_menu()
 */
function projecthealth_form($form, &$form_state) {

  // @todo: support monthly snapshot.
  $form['snapshot'] = array(
    '#type' => 'textfield',
    '#title' => t('Snapshot name'),
    '#description' => t('Give the name to snapshot.'),
    '#default_value' => t('All time'),
    '#disabled' => TRUE,
  );

  $form['field_project_machine_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Project machine name'),
    '#description' => t('The machine name of the project at Drupal.org'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );
  return $form;
}

/**
 * Submit handler for projecthealth_form().
 */
function projecthealth_form_submit($form, $form_state) {
  $values = $form_state['values'];
  // Create a snapshot id for current status calculation.
  $sid = projecthealth_snapshot_create($values['snapshot']);
  $project = drupalorg_api_get_project($values['field_project_machine_name']);
  $pid = projecthealth_project_create($sid, $project);

  $page = 0;
  while (TRUE) {
    $result = drupalorg_api_get_issues($project, $page);
    foreach ($result->list as $issue) {
      projecthealth_issue_create($sid, $pid, $issue);
    }
    if (empty($result->next)) {
      break;
    }
    $page++;
  }
}

/**
 * Implements hook_permission().
 */
function projecthealth_permission() {
  return array(
    'projecthealth take snapshot' => array(
      'title' => t('Create Project health snapshot'),
      'description' => t('Take a project health snapshot'),
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function projecthealth_cron_queue_info() {
  $queues['projecthealth_issues'] = array(
    'worker callback' => 'projecthealth_snapshot_process_issues',
    'time' => 30,
  );
  $queues['projecthealth_comments'] = array(
    'worker callback' => 'projecthealth_snapshot_process_comments',
    'time' => 30,
  );
  return $queues;
}

/**
 * Creates a snapshot.
 */
function projecthealth_snapshot_create($title) {

  $fields = array(
    'created' => REQUEST_TIME,
    'start' => 0,
    'end' => -1,
    'progress' => 0,
    'title' => $title,
  );

  $snapshot_id = db_insert('projecthealth_snapshot')
    ->fields($fields)
    ->execute();

  return $snapshot_id;
}

/**
 * Creates a project.
 */
function projecthealth_project_create($sid, $project) {

  $fields = array(
    'name' => $project->field_project_machine_name,
    'created' => $project->created,
    'sid' => $sid,
    'uid' => $project->author->id,
    'sync_time' => REQUEST_TIME,
    'maintenance_status' => $project->taxonomy_vocabulary_44->id,
    'development_status' => $project->taxonomy_vocabulary_46->id,
    'downloads' => $project->field_download_count,
  );

  $project_id = db_insert('projecthealth_project')
    ->fields($fields)
    ->execute();

  projecthealth_user_update($project_id, $project->author->id, $project->created);

  return $project_id;
}

/**
 * Creates a issue.
 */
function projecthealth_issue_create($sid, $pid, $issue) {

  $fields = array(
    'created' => $issue->created,
    'sid' => $sid,
    'pid' => $pid,
    'uid' => $issue->author->id,
    'sync_time' => REQUEST_TIME,
    'issue_id' => $issue->nid,
    'priority' => $issue->field_issue_priority,
    'status' => $issue->field_issue_status,
    'category' => $issue->field_issue_category,
  );

  $issue_id = db_insert('projecthealth_issue')
    ->fields($fields)
    ->execute();

  projecthealth_user_update($pid, $issue->author->id, $issue->created);

  return $issue_id;
}

/**
 * Creates a project.
 */
function projecthealth_user_create($pid, $do_uid, $latest_activity = 0) {
  $user_id = NULL;
  $user = drupalorg_api_get_user($do_uid);
  if ($user) {
    $fields = array(
      'uid' => $user->uid,
      'created' => $user->created,
      'name' => $user->name,
      'pid' => $pid,
      'maintainer' => -1,
      'latest_activity' => $latest_activity,
    );
    $user_id = db_insert('projecthealth_user')
      ->fields($fields)
      ->execute();
  }
  return $user_id;
}

/**
 * Update user's last activity time.
 */
function projecthealth_user_update($pid, $do_uid, $activity_time) {
  // Get latest activity.
  $result = db_select('projecthealth_user', 'pu')
    ->fields('pu')
    ->condition('uid', $do_uid)
    ->condition('pid', $pid)
    ->execute()
    ->fetchAssoc();

  if (empty($result)) {
    projecthealth_user_create($pid, $do_uid, $activity_time);
  }
  else {
    $latest_activity = $result['latest_activity'];
    if ($latest_activity < $activity_time) {
      $fields = array(
        'latest_activity' => $activity_time,
      );
      db_update('projecthealth_user')
        ->fields($fields)
        ->condition('uid', $do_uid)
        ->condition('pid', $pid)
        ->execute();
    }
  }
}
